name: Terraform Deployment

on:
  push:
    branches:
      - main  # Trigger only on this branch

concurrency:
  group: terraform-deploy
  cancel-in-progress: true  # Cancel previous runs if a new one starts

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: test

    permissions:
      id-token: write  # Required for OIDC login to Azure
      contents: read

    steps:
      # 📥 Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 🛠️ Install Node.js (if needed for tooling/scripts)
      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs

      # 📦 Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5

      # 🔐 Authenticate to Azure using OIDC
      - name: Login to Azure using Federated Credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: false

      # 🧹 Format Terraform code
      - name: Terraform Format
        working-directory: terraform
        run: terraform fmt -recursive

      # 🔐 Generate secrets.auto.tfvars from GitHub secrets
      - name: Generate secrets.auto.tfvars
        working-directory: terraform
        run: |
          cat <<EOF > secrets.auto.tfvars
          tenant_id       = "${{ secrets.AZURE_TENANT_ID }}"
          subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          client_id       = "${{ secrets.AZURE_CLIENT_ID }}"
          EOF

      # ⚙️ Terraform Init (TEMPORARY unlock step)
      - name: Terraform Init for Unlock (TEMPORARY)
        working-directory: terraform
        run: |
          terraform init -reconfigure \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="storage_account_name=stgsnefftflab" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=test/terraform.tfstate"

      # 🔁 Retryable Terraform Init
      - name: Terraform Init with Retry
        working-directory: terraform
        run: |
          for i in {1..3}; do
            terraform init -reconfigure \
              -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
              -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
              -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
              -backend-config="storage_account_name=stgsnefftflab" \
              -backend-config="container_name=tfstate" \
              -backend-config="key=test/terraform.tfstate" \
              && break || sleep 10
          done

      # ✅ Validate Terraform configuration
      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      # 📋 Terraform Plan (auto-loads *.auto.tfvars)
      - name: Terraform Plan with Retry
        working-directory: terraform
        run: |
          for i in {1..3}; do
            terraform plan -lock-timeout=60s -input=false -out=tfplan && break || sleep 10
          done

      # 🚀 Terraform Apply (only on matching branch)
      - name: Terraform Apply with Retry
        if: github.ref == 'refs/main'
        working-directory: terraform
        run: |
          for i in {1..3}; do
            terraform apply -lock-timeout=60s -auto-approve tfplan && break || sleep 10
          done

      # 🧼 Cleanup secrets file
      - name: Cleanup tfvars
        if: always()
        working-directory: terraform
        run: rm -f secrets.auto.tfvars
