name: Terraform Deployment

on:
  push:
    branches:
      - main

concurrency:
  group: terraform-deploy
  cancel-in-progress: true

jobs:
  terraform:
    name: Terraform Apply (Test)
    runs-on: ubuntu-latest
    environment: test

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Login to Azure using Federated Credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: false

      - name: Terraform Format
        working-directory: terraform
        run: terraform fmt -recursive

      # - name: Ensure Terraform State Lock is Cleared (with Retry)
      #   working-directory: terraform
      #   run: |
      #     for i in {1..3}; do
      #       echo "Checking for locked state file (attempt $i)..."
      #       if az storage blob exists \
      #           --account-name sa01poc20099wh701 \
      #           --container-name tfstate \
      #           --name tfstate/test/terraform.tfstate.lock \
      #           --auth-mode login | grep -q 'true'; then
      #           echo "Lock file found. Breaking lease and deleting..."
      #           az storage blob lease break \
      #               --account-name sa01poc20099wh701 \
      #               --container-name tfstate \
      #               --blob tfstate/test/terraform.tfstate.lock \
      #               --auth-mode login
      #           az storage blob delete \
      #               --account-name sa01poc20099wh701 \
      #               --container-name tfstate \
      #               --name tfstate/test/terraform.tfstate.lock \
      #               --auth-mode login
      #           echo "Waiting for lock cleanup to propagate..."
      #           sleep 5
      #       else
      #         echo "No lock file found."
      #         break
      #       fi
      #       sleep 5
      #     done

      - name: Terraform Init with Retry
        working-directory: terraform
        run: |
          for i in {1..3}; do
            terraform init -reconfigure \
              -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
              -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
              -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
              -backend-config="storage_account_name=stgsnefftflab" \
              -backend-config="container_name=tfstate" \
              -backend-config="key=test/terraform.tfstate" \
              && break || sleep 10
          done

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      # - name: Terraform Import Resource Group (Conditional with Retry)
      #   working-directory: terraform
      #   run: |
      #     echo "Checking if resource group is already in state..."
      #     if terraform state list | grep -q azurerm_resource_group.rg; then
      #       echo "Resource group already in state. Skipping import."
      #     else
      #       echo "Importing resource group..."
      #       for i in {1..3}; do
      #         terraform import azurerm_resource_group.rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-cummins-tf-lab2-wh701 && break || {
      #           echo "Import failed. Retrying in 10 seconds..."
      #           sleep 10
      #         }
      #       done
      #     fi

      - name: Terraform Plan with Retry
        working-directory: terraform
        run: |
          for i in {1..3}; do
            terraform plan -var-file=test.tfvars -out=tfplan && break || sleep 10
          done

      - name: Terraform Apply with Retry
        if: github.ref == 'refs/heads/main'
        working-directory: terraform
        run: |
          for i in {1..3}; do
            terraform apply -auto-approve tfplan && break || sleep 10
          done
