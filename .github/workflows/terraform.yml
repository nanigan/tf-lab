
name: Terraform Deployment

on:
  push:
    branches:
      - main

concurrency:
  group: terraform-deploy
  cancel-in-progress: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: test

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Login to Azure using Federated Credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: false

      - name: Terraform Format
        working-directory: terraform
        run: terraform fmt -recursive

      - name: Generate test.tfvars from secrets
        working-directory: terraform
        run: |
          cat <<EOF > test.tfvars
          tenant_id           = "${{ secrets.AZURE_TENANT_ID }}"
          subscription_id     = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          client_id           = "${{ secrets.AZURE_CLIENT_ID }}"
          storage_account_name = "stgsnefftflab"
          container_name       = "tfstate"
          resource_group_name  = "rg-cummins-tf-lab"
          key                  = "test/terraform.tfstate"
          location             = "westus2"
          environment          = "test"
          key_vault_name       = "sneffkvtpersonal"
          tags = {
            environment     = "test"
            appid           = "20099"
            bc              = "598"
            rc              = "143"
            bu              = "cbs"
            techowner       = "it069"
            billingowner    = "Low"
            billtag         = "rg"
            cc              = "na"
          }
          EOF

      - name: Confirm test.tfvars content
        working-directory: terraform
        run: |
          echo "Contents of test.tfvars:"
          cat test.tfvars

      - name: Terraform Init for Unlock (TEMPORARY)
        working-directory: terraform
        run: |
          terraform init -reconfigure             -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}"             -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}"             -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"             -backend-config="storage_account_name=stgsnefftflab"             -backend-config="container_name=tfstate"             -backend-config="key=test/terraform.tfstate"

      - name: Terraform Init with Retry
        working-directory: terraform
        run: |
          for i in {1..3}; do
            terraform init -reconfigure               -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}"               -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}"               -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"               -backend-config="storage_account_name=sa01poc20099wh701"               -backend-config="container_name=tfstate"               -backend-config="key=test/terraform.tfstate"               && break || sleep 10
          done


      # Uncomment the following lines if you need to import an existing resource group
      # Note: This is a temporary step and should be removed after the initial run
      # - name: Import existing resource group (TEMPORARY)
      #   working-directory: terraform
      #   run: |
      #     terraform import -var-file=test.tfvars azurerm_resource_group.rg "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-cummins-tf-lab2-wh701"

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan with Retry
        working-directory: terraform
        run: |
          for i in {1..3}; do
            terraform plan -lock-timeout=60s -input=false -var-file=test.tfvars -out=tfplan && break || sleep 10
          done

      - name: Terraform Apply with Retry
        if: github.ref == 'refs/heads/scratch-5202025'
        working-directory: terraform
        run: |
          for i in {1..3}; do
            terraform apply -lock-timeout=60s -auto-approve tfplan && break || sleep 10
          done
