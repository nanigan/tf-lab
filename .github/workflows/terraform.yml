name: Terraform Deployment

on:
  push:
    branches:
      - main
      - test
      - prod
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (test, prod)'
        required: true
        default: 'test'

concurrency:
  group: terraform-deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  terraform:
    environment: ${{ github.event.inputs.environment || (github.ref_name == 'main' && 'prod') || (github.ref_name == 'test' && 'test') || (github.ref_name == 'prod' && 'prod') || 'test' }}
    runs-on: ubuntu-latest

    permissions:
      id-token: write    # Required for OIDC authentication with Azure
      contents: read     # Allows workflow to read repository contents

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}           # Azure client ID from environment secrets
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}           # Azure tenant ID from environment secrets
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Azure subscription ID from environment secrets
      ARM_USE_OIDC: "true"                                    # Instructs provider/backend to use OIDC
      BRANCH_NAME: ${{ github.ref_name }}                     # Current branch name
      ENV_NAME: ${{ github.event.inputs.environment || (github.ref_name == 'main' && 'prod') || (github.ref_name == 'test' && 'test') || (github.ref_name == 'prod' && 'prod') || 'test' }} # Target environment
      TF_ROOT: terraform/environments/${{ github.event.inputs.environment || (github.ref_name == 'main' && 'prod') || (github.ref_name == 'test' && 'test') || (github.ref_name == 'prod' && 'prod') || 'test' }} # Path to environment code
      BACKEND_KEY: ${{ github.event.inputs.environment || (github.ref_name == 'main' && 'prod') || (github.ref_name == 'test' && 'test') || (github.ref_name == 'prod' && 'prod') || 'test' }}/terraform.tfstate # State file key

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        # Checks out your repository code so workflow steps can access it

      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
        # Installs Node.js, required if your Terraform modules or scripts use Node.js

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5
        # Installs the specified version of Terraform CLI

      - name: Login to Azure using federated credentials
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        # Authenticates to Azure using OIDC and the credentials from environment secrets

      - name: Terraform Init
        working-directory: ${{ env.TF_ROOT }}
        run: terraform init -reconfigure -backend-config=backend.tfvars
        # Initializes Terraform, configures the backend for remote state storage

        # This step is commented out to avoid removing the resource group from state.
      # - name: Remove resource group from state (if present)
      #   working-directory: ${{ env.TF_ROOT }}
      #   run: |
      #     terraform state rm azurerm_resource_group.rg || true
        # (Optional) Removes the resource group from Terraform state if it was previously managed

      - name: Terraform Validate
        working-directory: ${{ env.TF_ROOT }}
        run: terraform validate
        # Validates the Terraform configuration files

      - name: Terraform Plan
        working-directory: ${{ env.TF_ROOT }}
        run: terraform plan -lock-timeout=60s -input=false -out=tfplan
        # Creates an execution plan and saves it to a file

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/prod' || github.ref == 'refs/heads/test'
        working-directory: ${{ env.TF_ROOT }}
        run: terraform apply -lock-timeout=60s -auto-approve tfplan
        # Applies the Terraform plan to provision/update resources (only on main, prod, or test branches)