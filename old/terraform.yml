name: Terraform Deployment

on:
  push:
    branches:
      - main  # Trigger workflow only on pushes to the main branch

concurrency:
  group: terraform-deploy
  cancel-in-progress: true  # Cancel any in-progress runs if a new one starts

jobs:
  terraform:
    name: Terraform Apply (${{ github.environment }})
    runs-on: ubuntu-latest
    environment: test  # GitHub Environment (used for secrets and tfvars selection)

    permissions:
      id-token: write  # Required for OIDC authentication with Azure
      contents: read   # Required to checkout the repo

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        # Pulls your Terraform code from the GitHub repository

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6
        # Installs the specified version of Terraform

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        # Authenticates to Azure using federated credentials (OIDC)

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init -reconfigure \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="storage_account_name=stgsnefftflab" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ github.environment }}/terraform.tfstate"
        # Initializes Terraform and configures the backend dynamically based on the environment

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate
        # Validates the Terraform configuration files

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var-file="${{ github.environment }}.tfvars" \
            -out=tfplan
        # Generates an execution plan using secrets and environment-specific tfvars

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: terraform
        run: terraform apply -auto-approve tfplan
        # Applies the Terraform plan automatically (only on main branch)
